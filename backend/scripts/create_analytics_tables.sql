-- Enhanced Analytics and Performance Tracking Tables for SupervisorDashboard
-- HackMTY 2025 - GateGroup SmartStation

-- =====================================================
-- PERFORMANCE TRACKING TABLES
-- =====================================================

-- Table: INVENTORY_SESSIONS
-- Tracks each inventory validation session with timing and performance metrics
CREATE TABLE IF NOT EXISTS INVENTORY_SESSIONS (
    SESSION_ID VARCHAR(50) PRIMARY KEY,
    FLIGHT_NUMBER VARCHAR(20) NOT NULL,
    CART_ID INTEGER NOT NULL,
    EMPLOYEE_ID VARCHAR(50) NOT NULL,
    START_TIME TIMESTAMP_NTZ NOT NULL,
    END_TIME TIMESTAMP_NTZ,
    DURATION_SECONDS INTEGER,
    PHOTOS_TAKEN INTEGER DEFAULT 0,
    ITEMS_SCANNED INTEGER DEFAULT 0,
    ERRORS_DETECTED INTEGER DEFAULT 0,
    STATUS VARCHAR(20) DEFAULT 'IN_PROGRESS', -- IN_PROGRESS, COMPLETED, FAILED
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- Table: EMPLOYEE_PERFORMANCE_METRICS
-- Aggregated daily performance metrics per employee
CREATE TABLE IF NOT EXISTS EMPLOYEE_PERFORMANCE_METRICS (
    METRIC_ID INTEGER AUTOINCREMENT PRIMARY KEY,
    EMPLOYEE_ID VARCHAR(50) NOT NULL,
    METRIC_DATE DATE NOT NULL,
    TOTAL_SESSIONS INTEGER DEFAULT 0,
    TOTAL_CARTS_COMPLETED INTEGER DEFAULT 0,
    TOTAL_ITEMS_PROCESSED INTEGER DEFAULT 0,
    TOTAL_ERRORS INTEGER DEFAULT 0,
    TOTAL_DURATION_SECONDS INTEGER DEFAULT 0,
    AVG_TIME_PER_CART_SECONDS FLOAT,
    ERROR_RATE_PERCENT FLOAT,
    ITEMS_PER_HOUR FLOAT,
    ACCURACY_SCORE FLOAT, -- 100 - error_rate
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UNIQUE (EMPLOYEE_ID, METRIC_DATE)
);

-- Table: ERROR_LOG
-- Detailed log of all errors detected during inventory validation
CREATE TABLE IF NOT EXISTS ERROR_LOG (
    ERROR_ID INTEGER AUTOINCREMENT PRIMARY KEY,
    SESSION_ID VARCHAR(50) NOT NULL,
    EMPLOYEE_ID VARCHAR(50) NOT NULL,
    FLIGHT_NUMBER VARCHAR(20),
    CART_ID INTEGER,
    ERROR_TYPE VARCHAR(50) NOT NULL, -- MISSING_ITEM, WRONG_ITEM, WEIGHT_MISMATCH, PHOTO_QUALITY
    ERROR_DESCRIPTION TEXT,
    PRODUCT_SKU VARCHAR(100),
    EXPECTED_VALUE VARCHAR(200),
    ACTUAL_VALUE VARCHAR(200),
    SEVERITY VARCHAR(20) DEFAULT 'MEDIUM', -- LOW, MEDIUM, HIGH, CRITICAL
    RESOLVED BOOLEAN DEFAULT FALSE,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (SESSION_ID) REFERENCES INVENTORY_SESSIONS(SESSION_ID)
);

-- Table: TRAINING_NEEDS
-- Identified training requirements based on performance analysis
CREATE TABLE IF NOT EXISTS TRAINING_NEEDS (
    TRAINING_ID INTEGER AUTOINCREMENT PRIMARY KEY,
    EMPLOYEE_ID VARCHAR(50) NOT NULL,
    SKILL_AREA VARCHAR(100) NOT NULL, -- PRODUCT_IDENTIFICATION, WEIGHT_READING, PHOTO_QUALITY, SPEED, ACCURACY
    PRIORITY VARCHAR(20) DEFAULT 'MEDIUM', -- LOW, MEDIUM, HIGH, URGENT
    CURRENT_SCORE FLOAT,
    TARGET_SCORE FLOAT DEFAULT 90.0,
    IDENTIFIED_DATE DATE DEFAULT CURRENT_DATE(),
    COMPLETED_DATE DATE,
    STATUS VARCHAR(20) DEFAULT 'PENDING', -- PENDING, IN_PROGRESS, COMPLETED
    NOTES TEXT,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- Table: AI_CHAT_HISTORY
-- Store AI assistant conversations for context and analysis
CREATE TABLE IF NOT EXISTS AI_CHAT_HISTORY (
    CHAT_ID INTEGER AUTOINCREMENT PRIMARY KEY,
    SESSION_ID VARCHAR(50),
    USER_ID VARCHAR(50) NOT NULL,
    USER_MESSAGE TEXT NOT NULL,
    AI_RESPONSE TEXT NOT NULL,
    CONTEXT_DATA JSON, -- Dashboard data or metrics at time of chat
    SENTIMENT VARCHAR(20), -- POSITIVE, NEUTRAL, NEGATIVE
    ACTION_TAKEN VARCHAR(100), -- TRAINING_SCHEDULED, WORKFLOW_ADJUSTED, etc.
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- Table: SUSTAINABILITY_METRICS
-- Track waste reduction and process optimization metrics
CREATE TABLE IF NOT EXISTS SUSTAINABILITY_METRICS (
    METRIC_ID INTEGER AUTOINCREMENT PRIMARY KEY,
    METRIC_DATE DATE NOT NULL,
    ERRORS_PREVENTED INTEGER DEFAULT 0,
    WASTE_REDUCTION_KG FLOAT DEFAULT 0.0,
    TIME_SAVED_MINUTES INTEGER DEFAULT 0,
    PROCESS_EFFICIENCY_PERCENT FLOAT,
    COST_SAVINGS_USD FLOAT DEFAULT 0.0,
    CARBON_FOOTPRINT_REDUCTION_KG FLOAT DEFAULT 0.0,
    NOTES TEXT,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UNIQUE (METRIC_DATE)
);

-- Table: REAL_TIME_ALERTS
-- Store real-time alerts for supervisor dashboard
CREATE TABLE IF NOT EXISTS REAL_TIME_ALERTS (
    ALERT_ID INTEGER AUTOINCREMENT PRIMARY KEY,
    ALERT_TYPE VARCHAR(50) NOT NULL, -- HIGH_ERROR_RATE, SLOW_PERFORMANCE, TRAINING_NEEDED, SYSTEM_ISSUE
    SEVERITY VARCHAR(20) DEFAULT 'MEDIUM',
    EMPLOYEE_ID VARCHAR(50),
    TITLE VARCHAR(200) NOT NULL,
    MESSAGE TEXT NOT NULL,
    STATUS VARCHAR(20) DEFAULT 'ACTIVE', -- ACTIVE, ACKNOWLEDGED, RESOLVED
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    ACKNOWLEDGED_AT TIMESTAMP_NTZ,
    RESOLVED_AT TIMESTAMP_NTZ
);

-- Table: PERFORMANCE_BENCHMARKS
-- Store performance benchmarks for comparison
CREATE TABLE IF NOT EXISTS PERFORMANCE_BENCHMARKS (
    BENCHMARK_ID INTEGER AUTOINCREMENT PRIMARY KEY,
    METRIC_NAME VARCHAR(100) NOT NULL,
    TARGET_VALUE FLOAT NOT NULL,
    EXCELLENT_THRESHOLD FLOAT,
    GOOD_THRESHOLD FLOAT,
    NEEDS_IMPROVEMENT_THRESHOLD FLOAT,
    DESCRIPTION TEXT,
    ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- =====================================================
-- INDEXES FOR PERFORMANCE
-- =====================================================

CREATE INDEX IF NOT EXISTS idx_sessions_employee ON INVENTORY_SESSIONS(EMPLOYEE_ID);
CREATE INDEX IF NOT EXISTS idx_sessions_flight ON INVENTORY_SESSIONS(FLIGHT_NUMBER);
CREATE INDEX IF NOT EXISTS idx_sessions_date ON INVENTORY_SESSIONS(START_TIME);
CREATE INDEX IF NOT EXISTS idx_sessions_status ON INVENTORY_SESSIONS(STATUS);

CREATE INDEX IF NOT EXISTS idx_metrics_employee ON EMPLOYEE_PERFORMANCE_METRICS(EMPLOYEE_ID);
CREATE INDEX IF NOT EXISTS idx_metrics_date ON EMPLOYEE_PERFORMANCE_METRICS(METRIC_DATE);

CREATE INDEX IF NOT EXISTS idx_errors_employee ON ERROR_LOG(EMPLOYEE_ID);
CREATE INDEX IF NOT EXISTS idx_errors_type ON ERROR_LOG(ERROR_TYPE);
CREATE INDEX IF NOT EXISTS idx_errors_date ON ERROR_LOG(CREATED_AT);

CREATE INDEX IF NOT EXISTS idx_training_employee ON TRAINING_NEEDS(EMPLOYEE_ID);
CREATE INDEX IF NOT EXISTS idx_training_status ON TRAINING_NEEDS(STATUS);

CREATE INDEX IF NOT EXISTS idx_chat_user ON AI_CHAT_HISTORY(USER_ID);
CREATE INDEX IF NOT EXISTS idx_chat_date ON AI_CHAT_HISTORY(CREATED_AT);

CREATE INDEX IF NOT EXISTS idx_alerts_status ON REAL_TIME_ALERTS(STATUS);
CREATE INDEX IF NOT EXISTS idx_alerts_employee ON REAL_TIME_ALERTS(EMPLOYEE_ID);

-- =====================================================
-- INITIAL BENCHMARK DATA
-- =====================================================

INSERT INTO PERFORMANCE_BENCHMARKS (METRIC_NAME, TARGET_VALUE, EXCELLENT_THRESHOLD, GOOD_THRESHOLD, NEEDS_IMPROVEMENT_THRESHOLD, DESCRIPTION) VALUES
('CARTS_PER_HOUR', 1.5, 2.0, 1.2, 0.8, 'Number of carts processed per hour'),
('ERROR_RATE_PERCENT', 1.0, 0.5, 1.0, 2.0, 'Percentage of errors in inventory validation'),
('AVG_CART_TIME_MINUTES', 40, 30, 40, 60, 'Average time to complete one cart'),
('ACCURACY_SCORE', 99.0, 99.5, 99.0, 97.0, 'Overall accuracy score (100 - error_rate)'),
('ITEMS_PER_HOUR', 50, 70, 50, 30, 'Number of items processed per hour');

-- =====================================================
-- VIEWS FOR DASHBOARD
-- =====================================================

-- View: Employee Performance Summary (Last 7 Days)
CREATE OR REPLACE VIEW VW_EMPLOYEE_PERFORMANCE_7D AS
SELECT
    e.EMPLOYEE_ID,
    u.USERNAME,
    u.FULL_NAME,
    COUNT(DISTINCT s.SESSION_ID) AS TOTAL_SESSIONS,
    SUM(s.ITEMS_SCANNED) AS TOTAL_ITEMS,
    SUM(s.ERRORS_DETECTED) AS TOTAL_ERRORS,
    AVG(s.DURATION_SECONDS) AS AVG_SESSION_DURATION,
    ROUND(SUM(s.ERRORS_DETECTED) * 100.0 / NULLIF(SUM(s.ITEMS_SCANNED), 0), 2) AS ERROR_RATE,
    ROUND(SUM(s.ITEMS_SCANNED) / NULLIF(SUM(s.DURATION_SECONDS) / 3600.0, 0), 2) AS ITEMS_PER_HOUR,
    ROUND(100 - (SUM(s.ERRORS_DETECTED) * 100.0 / NULLIF(SUM(s.ITEMS_SCANNED), 0)), 2) AS ACCURACY_SCORE
FROM USERS u
LEFT JOIN INVENTORY_SESSIONS s ON u.USER_ID = e.EMPLOYEE_ID
WHERE s.START_TIME >= DATEADD(DAY, -7, CURRENT_DATE())
    AND s.STATUS = 'COMPLETED'
GROUP BY e.EMPLOYEE_ID, u.USERNAME, u.FULL_NAME;

-- View: Daily Performance Trends
CREATE OR REPLACE VIEW VW_DAILY_PERFORMANCE_TRENDS AS
SELECT
    DATE(START_TIME) AS METRIC_DATE,
    COUNT(DISTINCT SESSION_ID) AS TOTAL_SESSIONS,
    COUNT(DISTINCT EMPLOYEE_ID) AS ACTIVE_EMPLOYEES,
    SUM(ITEMS_SCANNED) AS TOTAL_ITEMS,
    SUM(ERRORS_DETECTED) AS TOTAL_ERRORS,
    ROUND(SUM(ERRORS_DETECTED) * 100.0 / NULLIF(SUM(ITEMS_SCANNED), 0), 2) AS ERROR_RATE,
    ROUND(AVG(DURATION_SECONDS / 60.0), 2) AS AVG_SESSION_MINUTES
FROM INVENTORY_SESSIONS
WHERE STATUS = 'COMPLETED'
    AND START_TIME >= DATEADD(DAY, -30, CURRENT_DATE())
GROUP BY DATE(START_TIME)
ORDER BY METRIC_DATE DESC;

-- View: Error Type Distribution
CREATE OR REPLACE VIEW VW_ERROR_TYPE_DISTRIBUTION AS
SELECT
    ERROR_TYPE,
    COUNT(*) AS ERROR_COUNT,
    ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER (), 2) AS PERCENTAGE,
    AVG(CASE WHEN SEVERITY = 'CRITICAL' THEN 1 ELSE 0 END) * 100 AS CRITICAL_PERCENT
FROM ERROR_LOG
WHERE CREATED_AT >= DATEADD(DAY, -30, CURRENT_DATE())
GROUP BY ERROR_TYPE
ORDER BY ERROR_COUNT DESC;

-- =====================================================
-- STORED PROCEDURES (Snowflake JavaScript UDFs)
-- =====================================================

-- Function to calculate employee performance score
CREATE OR REPLACE FUNCTION CALCULATE_PERFORMANCE_SCORE(
    items_per_hour FLOAT,
    error_rate FLOAT,
    accuracy_score FLOAT
)
RETURNS FLOAT
LANGUAGE JAVASCRIPT
AS
$$
    // Weighted scoring: Speed (30%), Accuracy (50%), Error Rate (20%)
    const speedScore = Math.min(items_per_hour / 70 * 100, 100); // 70 items/hour = 100%
    const accuracyWeight = accuracy_score;
    const errorPenalty = Math.max(0, 100 - (error_rate * 50)); // Each 1% error = 50 point penalty

    const finalScore = (speedScore * 0.3) + (accuracyWeight * 0.5) + (errorPenalty * 0.2);
    return Math.round(finalScore * 100) / 100;
$$;

-- Function to determine training priority
CREATE OR REPLACE FUNCTION DETERMINE_TRAINING_PRIORITY(
    error_rate FLOAT,
    items_per_hour FLOAT,
    days_since_last_training INTEGER
)
RETURNS VARCHAR(20)
LANGUAGE JAVASCRIPT
AS
$$
    if (error_rate > 2.0 || days_since_last_training > 90) return 'URGENT';
    if (error_rate > 1.5 || items_per_hour < 30) return 'HIGH';
    if (error_rate > 1.0 || items_per_hour < 40) return 'MEDIUM';
    return 'LOW';
$$;

-- =====================================================
-- COMMENTS
-- =====================================================

COMMENT ON TABLE INVENTORY_SESSIONS IS 'Tracks individual inventory validation sessions with performance metrics';
COMMENT ON TABLE EMPLOYEE_PERFORMANCE_METRICS IS 'Daily aggregated performance metrics per employee';
COMMENT ON TABLE ERROR_LOG IS 'Detailed log of all errors for analysis and training';
COMMENT ON TABLE TRAINING_NEEDS IS 'Identified training requirements based on performance';
COMMENT ON TABLE AI_CHAT_HISTORY IS 'AI assistant conversation history for context';
COMMENT ON TABLE SUSTAINABILITY_METRICS IS 'Environmental and efficiency impact metrics';
COMMENT ON TABLE REAL_TIME_ALERTS IS 'Real-time alerts for supervisor dashboard';
COMMENT ON TABLE PERFORMANCE_BENCHMARKS IS 'Performance targets and thresholds';
